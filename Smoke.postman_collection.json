{
	"info": {
		"_postman_id": "d16f3577-1a89-47c4-b502-22893840091d",
		"name": "Issuance Smoke",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "646dc6f2-a09f-4356-bf7a-fa306fb0bf8d",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"//pm.environment.set(\"token\", data.access_token);",
							"pm.globals.set(\"token\", data.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "mlvPWKpFxGkEosiDPiLg4XRZYmQo3Zzn",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "vk88Pe32dVLEqEEjdppVNPOS1iwiD_qM5WG6aAucaRUTfpezC-eXhz4t8pANmMI3",
							"type": "text"
						},
						{
							"key": "audience",
							"value": "machine-to-machine-access",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://dev.auth.airmiles.ca/oauth/token",
					"protocol": "https",
					"host": [
						"dev",
						"auth",
						"airmiles",
						"ca"
					],
					"path": [
						"oauth",
						"token"
					]
				},
				"description": "Get access_token from Auth0 to use in other requests. For each requests below, we must get token first."
			},
			"response": []
		},
		{
			"name": "Health",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "https://dev.api.loyalty.com/v1/rice/health",
					"protocol": "https",
					"host": [
						"dev",
						"api",
						"loyalty",
						"com"
					],
					"path": [
						"v1",
						"rice",
						"health"
					]
				},
				"description": "Health check for AM Cash API"
			},
			"response": []
		},
		{
			"name": "Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63b25941-b0e8-42d2-806a-39d4a885959b",
						"exec": [
							"//Confirm a successful status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; ",
							"});",
							"",
							"//Verify the application header type is app json",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							" ",
							"if (contentTypeHeaderExists) {",
							"    tests[\"Content-Type is application/json\"] = ",
							"      responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"}",
							"",
							"//Series of smoke tests",
							"",
							"//Validate Items",
							"pm.test(\"Validate Items info is correct\", function () {",
							"    var jsonData = pm.response.json();console.log(jsonData);",
							"    pm.expect(jsonData.items[0].number).to.eql(2);",
							"    pm.expect(jsonData.items[0].name).to.eql(\"beans\");",
							"    pm.expect(jsonData.items[0].quantity).to.eql(4);",
							"    pm.expect(jsonData.items[0].baseAmount).to.eql(8);  ",
							"    pm.expect(jsonData.items[0].finalAmount).to.eql(10);",
							"    pm.expect(jsonData.items[0].id).to.eql(\"1234\");",
							"    ",
							"    ",
							"});",
							"",
							"//Validate Sponsor code",
							"pm.test(\"Sponsor Code is correct\", function () {",
							"    var jsonData = pm.response.json();console.log(jsonData);",
							"    pm.expect(jsonData.sponsorCode).to.eql(\"APAP\");",
							"    ",
							"});",
							"",
							"// Location code ",
							"pm.test(\"Verify locationCode\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    console.log(jsonData);",
							"    pm.expect(jsonData.locationCode).to.eql(\"0037\");",
							"   ",
							"});",
							"",
							"",
							"// Include a test for the collector number",
							"",
							"//response status should be equal to confirmed",
							"pm.test(\"Verify CONFIRMED status \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].status).to.eql(\"CONFIRMED\");",
							"}) ;  ",
							"",
							"// response error should be false",
							"pm.test(\"Verify there are no errors \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors).to.eql(null);",
							"}) ; ",
							"",
							"pm.test(\"Verify confirmation number is populated\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].confirmationNumber).to.not.eql(null);",
							"}) ; ",
							"    ",
							"pm.test(\"Verify processedDateTime is populated\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].processedDateTime).to.not.eql(null);    ",
							"}) ; ",
							"",
							"",
							"",
							"",
							"",
							"",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Request-Id",
						"value": "5da9272b-023a-403a-826c-4264def7dc48",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"basketPostTaxAmount\": 10,\n    \"basketPreTaxAmount\": 8,\n    \"checkoutDateTime\": \"2019-04-22T14:12:59.479Z\",\n    \"checkoutTransactionId\": \"12340001111\",\n    \"originalTransactionId\": \"34e\",\n    \"collectorNumber\": \"80085102028\",\n    \"deviceId\": \"string\",\n    \"items\": [\n        {\n            \"number\":\"2\",\n            \"name\": \"beans\",\n            \"baseAmount\": 8,\n            \"finalAmount\": 10,\n            \"id\": \"1234\",\n            \"quantity\": 4\n        }\n    ],\n    \"locationCode\": \"0037\",\n    \"sponsorCode\": \"APAP\",\n    \"tender\": [\n        \"CASH\"\n    ],\n    \"issuances\": [\n        {\n            \"offerId\": 22,\n            \"milesAmount\": 8,\n            \"offerDescription\": \"offer\",\n            \"issuanceOfferCode\": \"STANDARD\",\n            \"locationCode\": \"0037\"\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{rice_domain}}/{{rice_resource}}/partners/issuance/reverse",
					"host": [
						"{{rice_domain}}"
					],
					"path": [
						"{{rice_resource}}",
						"partners",
						"issuance",
						"reverse"
					]
				},
				"description": "Pre-calculated issuance"
			},
			"response": [
				{
					"name": "Post",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Request-Id",
								"value": "5da9272b-023a-403a-826c-4264def7dc48",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"basketPostTaxAmount\": 10,\n    \"basketPreTaxAmount\": 8,\n    \"checkoutDateTime\": \"2019-04-22T14:12:59.479Z\",\n    \"checkoutTransactionId\": \"12340001111\",\n    \"collectorNumber\": \"80085102028\",\n    \"deviceId\": \"string\",\n    \"items\": [\n        {\n            \"number\": \"1\",\n            \"name\": \"beans\",\n            \"baseAmount\": 8,\n            \"finalAmount\": 10,\n            \"id\": \"1234\",\n            \"quantity\": 4\n        }\n    ],\n    \"locationCode\": \"0037\",\n    \"sponsorCode\": \"APAP\",\n    \"tender\": [\n        \"CASH\"\n    ],\n    \"issuances\": [\n        {\n            \"offerId\": null,\n            \"milesAmount\": 8,\n            \"offerDescription\": \"offer\",\n            \"issuanceOfferCode\": \"STANDARD\",\n            \"locationCode\": \"0037\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{rice_domain}}/{{rice_resource}}/partners/issuance/post",
							"host": [
								"{{rice_domain}}"
							],
							"path": [
								"{{rice_resource}}",
								"partners",
								"issuance",
								"post"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=UTF-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 29 Apr 2019 22:55:00 GMT"
						},
						{
							"key": "Server",
							"value": "Member Resource Server"
						},
						{
							"key": "X-Request-ID",
							"value": "5da9272b-023a-403a-826c-4264def7dc48"
						},
						{
							"key": "X-Kong-Upstream-Latency",
							"value": "253"
						},
						{
							"key": "X-Kong-Proxy-Latency",
							"value": "0"
						},
						{
							"key": "Via",
							"value": "kong/0.11.1, 1.1 5f5ca5852c74982e7459707a6c9e215a.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "4fHH59NeRyvcWLoUD0VxTQ3GxHHUxthN_281jdj1rFZBs60WKr_3hQ=="
						}
					],
					"cookie": [],
					"body": "{\n    \"checkoutTransactionId\": \"12340001111\",\n    \"transactionId\": \"fd4d6b0a-c07e-4aab-8a23-5a7e4a1128a0\",\n    \"sponsorCode\": \"APAP\",\n    \"checkoutDateTime\": \"2019-04-22T14:12:59.479+0000\",\n    \"collectorNumber\": \"80085102028\",\n    \"locationCode\": \"0037\",\n    \"deviceId\": \"string\",\n    \"basketPreTaxAmount\": 8,\n    \"basketPostTaxAmount\": 10,\n    \"basketHSTAmount\": 0,\n    \"basketGSTAmount\": 0,\n    \"basketPSTAmount\": 0,\n    \"basketQSTAmount\": 0,\n    \"tender\": [\n        \"CASH\"\n    ],\n    \"items\": [\n        {\n            \"number\": \"1\",\n            \"name\": \"beans\",\n            \"quantity\": 4,\n            \"baseAmount\": 8,\n            \"finalAmount\": 10,\n            \"id\": \"1234\"\n        }\n    ],\n    \"issuances\": [\n        {\n            \"offerId\": null,\n            \"issuanceOfferCode\": \"STANDARD\",\n            \"offerDescription\": \"offer\",\n            \"locationCode\": \"0037\",\n            \"milesAmount\": 8,\n            \"contributingItemIds\": [],\n            \"confirmationNumber\": \"a62f8fd8-6628-404d-aa3e-85fb3608cdf0\",\n            \"processedDateTime\": \"2019-04-29T22:55:00.965+0000\",\n            \"status\": \"CONFIRMED\",\n            \"errors\": null\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Closed Collector number",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73422e5e-f211-49e7-bb7e-5668e9cb0c55",
						"exec": [
							"//Confirm an unsuccessful status code",
							"pm.test(\"Status code is not 200\", function () {",
							"    pm.response.to.not.have.status(200);",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; ",
							"});",
							"",
							"",
							"// response to contain error detail",
							"pm.test(\"Verify there are errors \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[0].errorCode).to.eql(\"CollectorClosed\");",
							"}) ; ",
							"",
							"pm.test(\"Verify the error reason\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[0].errorReason).to.eql(\"CollectorClosed: Invalid Collector Number 80000000060. The requested collector is closed in the system.\");",
							"}) ; ",
							"",
							"pm.test(\"Verify REJECTED status \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].status).to.eql(\"REJECTED\");",
							"}) ;  ",
							"",
							"",
							"",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"type": "text",
						"value": "5da9272b-023a-403a-826c-4264def7dc48"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"basketPostTaxAmount\": 10,\n    \"basketPreTaxAmount\": 8,\n    \"checkoutDateTime\": \"2019-04-22T14:12:59.479Z\",\n    \"checkoutTransactionId\": \"12340001111\",\n    \"collectorNumber\": \"80000000060\",\n    \"originalTransactionId\": \"34e\",\n    \"deviceId\": \"string\",\n    \"items\": [\n        {\n            \"number\": \"1\",\n            \"name\": \"beans\",\n            \"baseAmount\": 8,\n            \"finalAmount\": 10,\n            \"id\": \"1234\",\n            \"quantity\": 4\n        }\n    ],\n    \"locationCode\": \"0037\",\n    \"sponsorCode\": \"APAP\",\n    \"tender\": [\n        \"CASH\"\n    ],\n    \"issuances\": [\n        {\n            \"offerId\": 12,\n            \"milesAmount\": 8,\n            \"offerDescription\": \"offer\",\n            \"issuanceOfferCode\": \"STANDARD\",\n            \"locationCode\": \"0037\"\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://dev.api.loyalty.com/v1/partners/issuance/reverse",
					"protocol": "https",
					"host": [
						"dev",
						"api",
						"loyalty",
						"com"
					],
					"path": [
						"v1",
						"partners",
						"issuance",
						"reverse"
					]
				},
				"description": "Pre-calculated issuance"
			},
			"response": []
		},
		{
			"name": "Invalid Collecotr Number",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73422e5e-f211-49e7-bb7e-5668e9cb0c55",
						"exec": [
							"//Confirm an unsuccessful status code",
							"pm.test(\"Status code is not 200\", function () {",
							"    pm.response.to.not.have.status(200);",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; ",
							"});",
							"",
							"",
							"// response to contain error detail",
							"pm.test(\"Verify the descriptions for Invalid collector number \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.description[0]).to.eql( ",
							"        \"collectorNumber: Invalid Collector Number - 'testinvalid'.  Must be 11 characters, all digits\");",
							"}) ; ",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"type": "text",
						"value": "5da9272b-023a-403a-826c-4264def7dc48"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"basketPostTaxAmount\": 10,\n    \"basketPreTaxAmount\": 8,\n    \"checkoutDateTime\": \"2019-04-22T14:12:59.479Z\",\n    \"checkoutTransactionId\": \"12340001111\",\n    \"originalTransactionId\": \"34e\",\n    \"collectorNumber\": \"testinvalid\",\n    \"deviceId\": \"string\",\n    \"items\": [\n        {\n            \"number\": \"1\",\n            \"name\": \"beans\",\n            \"baseAmount\": 8,\n            \"finalAmount\": 10,\n            \"id\": \"1234\",\n            \"quantity\": 4\n        }\n    ],\n    \"locationCode\": \"0037\",\n    \"sponsorCode\": \"APAP\",\n    \"tender\": [\n        \"CASH\"\n    ],\n    \"issuances\": [\n        {\n            \"offerId\": 12,\n            \"milesAmount\": 8,\n            \"offerDescription\": \"offer\",\n            \"issuanceOfferCode\": \"STANDARD\",\n            \"locationCode\": \"0090\"\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://dev.api.loyalty.com/v1/partners/issuance/reverse",
					"protocol": "https",
					"host": [
						"dev",
						"api",
						"loyalty",
						"com"
					],
					"path": [
						"v1",
						"partners",
						"issuance",
						"reverse"
					]
				},
				"description": "Pre-calculated issuance"
			},
			"response": []
		},
		{
			"name": "Offer not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73422e5e-f211-49e7-bb7e-5668e9cb0c55",
						"exec": [
							"//Confirm an unsuccessful status code",
							"pm.test(\"Status code is not 200\", function () {",
							"    pm.response.to.not.have.status(200);",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; ",
							"});",
							"",
							"",
							"// response to contain error detail",
							"pm.test(\"Verify there are errors for offer not found\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[0].errorCode).to.eql(\"OfferNotFound\");",
							"}) ; ",
							"",
							"pm.test(\"Verify the error reason for offer not found\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[0].errorReason).to.eql(\"OfferNotFound: Invalid Issuance Offer Code: The Issuance Offer code BIGBUCKS does not exist in the system.\");",
							"}) ; ",
							"pm.test(\"Verify REJECTED status \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].status).to.eql(\"REJECTED\");",
							"}) ;  ",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"type": "text",
						"value": "5da9272b-023a-403a-826c-4264def7dc48"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"basketPostTaxAmount\": 10,\n  \"basketPreTaxAmount\": 8,\n  \"checkoutDateTime\": \"2019-04-22T14:12:59.479Z\",\n  \"checkoutTransactionId\": \"12340001111\",\n  \"originalTransactionId\": \"34e\",\n  \"collectorNumber\": \"80085102028\",\n  \"deviceId\": \"string\",\n  \"items\": [\n    {     \n      \"number\": \"1\",\n      \"name\" : \"beans\",\n      \"baseAmount\": 8,\n      \"finalAmount\": 10,\n      \"id\": \"1234\",\n      \"quantity\": 4\n    }\n  ],\n  \"locationCode\": \"0037\",\n  \"sponsorCode\": \"APAP\",\n  \"tender\": [\n    \"CASH\"\n  ],\n  \"issuances\": [\n    {\n      \"offerId\": -8,\n      \"milesAmount\": 3,\n      \"offerDescription\": \"offer\",\n      \"issuanceOfferCode\": \"BIGBUCKS\",\n      \"locationCode\": \"0037\"\n    }\n  ]\n}"
				},
				"url": {
					"raw": "{{rice_domain}}/{{rice_resource}}/partners/issuance/reverse",
					"host": [
						"{{rice_domain}}"
					],
					"path": [
						"{{rice_resource}}",
						"partners",
						"issuance",
						"reverse"
					]
				},
				"description": "Pre-calculated issuance"
			},
			"response": []
		},
		{
			"name": "Location Code  not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73422e5e-f211-49e7-bb7e-5668e9cb0c55",
						"exec": [
							"//Confirm an unsuccessful status code",
							"pm.test(\"Status code is not 200\", function () {",
							"    pm.response.to.not.have.status(200);",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; ",
							"});",
							"",
							"",
							"// response to contain error detail",
							"pm.test(\"Verify there are errors for offer not found\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[0].errorCode).to.eql(\"OfferNotFound\");",
							"}) ; ",
							"",
							"pm.test(\"Verify the error reason for offer not found\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[0].errorReason).to.eql(\"OfferNotFound: Invalid Issuance Offer Code: The Issuance Offer code STANDARD does not exist in the system.\");",
							"}) ; ",
							"",
							"",
							"pm.test(\"Verify there are errors for issuer not found\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[1].errorCode).to.eql(\"IssuerNotFound\");",
							"}) ; ",
							"",
							"pm.test(\"Verify the error reason for issuer not found\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[1].errorReason).to.eql(\"IssuerNotFound: Invalid Sponsor Code: The Sponsor code ABCD does not exist in the system.\");",
							"}) ; ",
							"pm.test(\"Verify REJECTED status \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].status).to.eql(\"REJECTED\");",
							"}) ;  ",
							"",
							"",
							"",
							"",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"type": "text",
						"value": "5da9272b-023a-403a-826c-4264def7dc48"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"basketPostTaxAmount\": 10,\n    \"basketPreTaxAmount\": 8,\n    \"checkoutDateTime\": \"2019-04-22T14:12:59.479Z\",\n    \"checkoutTransactionId\": \"12340001111\",\n    \"collectorNumber\": \"80085102028\",\n    \"deviceId\": \"string\",\n    \"items\": [\n        {\n            \"number\": \"1\",\n            \"name\": \"beans\",\n            \"baseAmount\": 8,\n            \"finalAmount\": 10,\n            \"id\": \"1234\",\n            \"quantity\": 4\n        }\n    ],\n    \"locationCode\": \"0037\",\n    \"sponsorCode\": \"ABCD\",\n    \"tender\": [\n        \"CASH\"\n    ],\n    \"issuances\": [\n        {\n            \"offerId\": 22,\n            \"milesAmount\": 8,\n            \"offerDescription\": \"offer\",\n            \"issuanceOfferCode\": \"STANDARD\",\n            \"locationCode\": \"0037\"\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{rice_domain}}/{{rice_resource}}/partners/issuance/post",
					"host": [
						"{{rice_domain}}"
					],
					"path": [
						"{{rice_resource}}",
						"partners",
						"issuance",
						"post"
					]
				},
				"description": "Pre-calculated issuance"
			},
			"response": []
		},
		{
			"name": "Collector not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73422e5e-f211-49e7-bb7e-5668e9cb0c55",
						"exec": [
							"//Confirm an unsuccessful status code",
							"pm.test(\"Status code is not 200\", function () {",
							"    pm.response.to.not.have.status(200);",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; ",
							"});",
							"",
							"",
							"// response to contain error detail",
							"pm.test(\"Verify there are errors for offer not found \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[0].errorCode).to.eql(\"CollectorNotFound\");",
							"}) ; ",
							"",
							"pm.test(\"Verify the offer not found error reason\", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].errors[0].errorReason).to.eql(\"CollectorNotFound: Invalid Collector Number 12345678900. The requested collector does not exist in the system.\");",
							"}) ; ",
							"",
							"pm.test(\"Verify REJECTED status \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.issuances[0].status).to.eql(\"REJECTED\");",
							"}) ;  ",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"type": "text",
						"value": "5da9272b-023a-403a-826c-4264def7dc48"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"basketPostTaxAmount\": 10,\n    \"basketPreTaxAmount\": 8,\n    \"checkoutDateTime\": \"2019-04-22T14:12:59.479Z\",\n    \"checkoutTransactionId\": \"12340001111\",\n    \"originalTransactionId\": \"34e\",\n    \"collectorNumber\": \"12345678900\",\n    \"deviceId\": \"string\",\n    \"items\": [\n        {\n            \"number\": \"1\",\n            \"name\": \"beans\",\n            \"baseAmount\": 8,\n            \"finalAmount\": 10,\n            \"id\": \"1234\",\n            \"quantity\": 4\n        }\n    ],\n    \"locationCode\": \"0037\",\n    \"sponsorCode\": \"APAP\",\n    \"tender\": [\n        \"CASH\"\n    ],\n    \"issuances\": [\n        {\n            \"offerId\": 12,\n            \"milesAmount\": 8,\n            \"offerDescription\": \"offer\",\n            \"issuanceOfferCode\": \"STANDARD\",\n            \"locationCode\": \"0037\"\n            \n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://dev.api.loyalty.com/v1/partners/issuance/reverse",
					"protocol": "https",
					"host": [
						"dev",
						"api",
						"loyalty",
						"com"
					],
					"path": [
						"v1",
						"partners",
						"issuance",
						"reverse"
					]
				},
				"description": "Pre-calculated issuance"
			},
			"response": []
		},
		{
			"name": "OriginalTransactionId appends",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd9b7bf8-2e64-4f37-a821-91643761f7b6",
						"exec": [
							"//Confirm an unsuccessful status code",
							"pm.test(\"Status code is  200\", function () {",
							"    pm.response.to.have.status(200);",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; ",
							"});",
							"",
							"",
							"// response to contain error detail",
							"pm.test(\"Verify originalTransactionId value appends \", function(){",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.originalTransactionId).to.eql(\"34e\");",
							"}) ; ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Request-Id",
						"value": "5da9272b-023a-403a-826c-4264def7dc48",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"basketPostTaxAmount\": 10,\n    \"basketPreTaxAmount\": 8,\n    \"checkoutDateTime\": \"2019-04-22T14:12:59.479Z\",\n    \"checkoutTransactionId\": \"12340001111\",\n    \"originalTransactionId\": \"34e\",\n    \"collectorNumber\": \"80085102028\",\n    \"deviceId\": \"string\",\n    \"items\": [\n        {\n            \"number\": -5,\n            \"name\": \"beans\",\n            \"baseAmount\": 8,\n            \"finalAmount\": 10,\n            \"id\": \"1234\",\n            \"quantity\": 4\n        }\n    ],\n    \"locationCode\": \"0037\",\n    \"sponsorCode\": \"APAP\",\n    \"tender\": [\n        \"CASH\"\n    ],\n    \"issuances\": [\n        {\n            \"offerId\": 12,\n            \"milesAmount\": 3,\n            \"offerDescription\": \"offer\",\n            \"issuanceOfferCode\": \"STANDARD\",\n            \"locationCode\": \"0037\"\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://dev.api.loyalty.com/v1/partners/issuance/reverse",
					"protocol": "https",
					"host": [
						"dev",
						"api",
						"loyalty",
						"com"
					],
					"path": [
						"v1",
						"partners",
						"issuance",
						"reverse"
					]
				},
				"description": "Pre-calculated issuance"
			},
			"response": []
		}
	]
}